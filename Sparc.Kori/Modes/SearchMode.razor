<aside id="kori-search" class="@(Kori.Mode == "Search" ? "show" : "")">
    <header>
        <div>
            <h5>Navigation</h5>
            <button onclick="@Kori.CloseAsync">
                <CloseIcon />
            </button>
        </div>
    </header>

    <BetterSearch IsLoading="@IsLoading" Placeholder="Type to find..." TItem="SearchContentResponse" OnSearch="SearchAsync">
        <ItemTemplate>
            @foreach (var messagesByRoom in messageResults.GroupBy(x => x.MessageRoomId))
            {
                var roomId = messagesByRoom.Key;
                var roomName = messagesByRoom.First().MessageRoomName;
                <article>
                    <div onclick="@(() => GoRoom(roomId))">
                        <PageIcon />
                        <span>@roomName</span>
                    </div>

                    @foreach (var message in messagesByRoom)
                    {
                        <div onclick="@(() => Go(message))">
                            <ContentIcon />
                            <span>@(message.MessageText ?? message.MessageTag)</span>
                        </div>
                    }
                </article>
            }
        </ItemTemplate>
    </BetterSearch>
</aside>

@code {
    bool IsLoading;
    List<SearchContentResponse> messageResults = new();
    string searchTerm = "";

    async Task<IEnumerable<SearchContentResponse>> SearchAsync(string? searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return Array.Empty<SearchContentResponse>();
        }

        IsLoading = true;
        var result = await Kori.SearchContentAsync(searchTerm);
        messageResults = result;
        IsLoading = false;

        return messageResults;
    }       

    async Task Go(SearchContentResponse selectedItem)
    {
        string baseUrl = selectedItem.MessageRoomName.StartsWith("http")
            ? selectedItem.MessageRoomName
            : $"https://{selectedItem.MessageRoomName}";

        string messageText = selectedItem.MessageText ?? selectedItem.MessageTag ?? "";

        string encodedTextFragment = Uri.EscapeDataString(messageText);

        var fullUrl = $"{baseUrl}#:~:text={encodedTextFragment}";

        Nav.NavigateTo(fullUrl);
    }

    async Task GoRoom(string roomId)
    {
        var roomName = messageResults.FirstOrDefault(m => m.MessageRoomId == roomId)?.MessageRoomName;

        var fullUrl = roomName.StartsWith("http")
            ? roomName
            : $"https://{roomName}";

        Nav.NavigateTo(fullUrl);
    }
}