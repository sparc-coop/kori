<aside id="kori-search" class="@(Kori.Mode == "Search" ? "show" : "")">
    <header>
        <div>
            <h5>Navigation</h5>
            <button onclick="@Kori.CloseAsync">
                <CloseIcon />
            </button>
        </div>
    </header>

    <BetterSearch IsLoading="@IsLoading" Placeholder="Type to find..." TItem="object" OnSearch="SearchAsync" OnSelect="Go">
        <ItemTemplate>
            @if (context is RoomSummary room)
            {
                <div @onclick="@(() => Go(room))">
                    <PageIcon />
                    <span>@(room.Name ?? room.Slug)</span>
                </div>
            }
            else if (context is MessageSummary message)
            {
                <div @onclick="@(() => Go(message))">
                    <ContentIcon />
                    <span>@(message.Text ?? message.Tag)</span>
                </div>
            }
        </ItemTemplate>
    </BetterSearch>

</aside>

@code {
    bool IsLoading;
    List<RoomSummary> _roomResults = new();
    List<MessageSummary> _messageResults = new();
    string searchTerm = "";

    void HandleInput(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        Console.WriteLine($"Input detected: {searchTerm}");
        _ = SearchAsync(searchTerm);
    }

    async Task<IEnumerable<object>> SearchAsync(string? searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return Array.Empty<object>();
        }

        IsLoading = true;
        var result = await Kori.SearchAsync(searchTerm);
        _roomResults = result.Rooms;
        _messageResults = result.Message;
        IsLoading = false;

        return _roomResults.Cast<object>().Concat(_messageResults.Cast<object>());
    }

    // async Task Go(object selectedItem)
    // {
    //     if (selectedItem is RoomSummary room)
    //     {
    //         Nav.NavigateTo(room.Name, forceLoad: true, replace: true);
    //     }
    //     else if (selectedItem is MessageSummary message)
    //     {
    //         
    //             Nav.NavigateTo($"{message.RoomName}#{message.Id}");
    //         
    //     }
    // }

    async Task Go(object selectedItem)
    {
        if (selectedItem is RoomSummary room)
        {            
            var fullUrl = room.Name.StartsWith("http") ? room.Name : $"https://{room.Name}";

            // Just for testing
            fullUrl = fullUrl.Replace("sparc.coop", "localhost:7044");
            
            Nav.NavigateTo(fullUrl);
        }
        else if (selectedItem is MessageSummary message)
        {           
            var fullUrl = message.RoomName.StartsWith("http") ? message.RoomName : $"https://{message.RoomName}#{message.Id}";

            // Just for testing
            fullUrl = fullUrl.Replace("sparc.coop", "localhost:7044");
           
            Nav.NavigateTo(fullUrl);
        }
    }
}

@* <script>
    window.onload = function () {
        // Verifica se há um fragmento na URL
        const id = window.location.hash;
        if (id) {
            const element = document.querySelector(id);
            if (element) {
                element.scrollIntoView({ behavior: 'smooth' });
            }
        }
    };
</script> *@

