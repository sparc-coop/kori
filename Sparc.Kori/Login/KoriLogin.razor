@rendermode @(new InteractiveServerRenderMode(prerender: false))

<style class="kori-ignore">
    @@import url(https://fonts.googleapis.com/css2?family=Encode+Sans+Semi+Expanded:wght@100;200;300;400;500;600;700;800;900&display=swap);
    @@import url(https://fonts.googleapis.com/css2?family=Encode+Sans+Expanded:wght@100;200;300;400;500;600;700;800;900&display=swap);
</style>

<AuthorizeView>
    <Authorized>
        <div class="login-component @(context.User.IsAnonymous() ? "loggedout" : "loggedin") kori-ignore">
            <button aria-label="user" @onclick=ToggleLoginMenu>
                <KoriUserIcon User="context.User" />
            </button>

            <section class="@(ShowMenu ? "show" : "")">
                @if (Auth.LoginState != LoginStates.LoggedIn)
                {
                    <header>
                        <h2>Welcome!</h2>
                        <p>Lorem ipsum dolor sit amet, consectetur</p>
                    </header>
                }
                else
                {
                    <header>
                        <button @onclick=ToggleAccountSettings>
                            <figure>
                                <img src="_content/Sparc.Kori/icons/User-green.svg" />
                                <figcaption>
                                    @Auth.User?.Username
                                    <aside>Set up your passkey</aside>
                                </figcaption>
                            </figure>
                        </button>
                    </header>
                }

                <menu>
                    @switch (Auth.LoginState)
                    {
                        case LoginStates.LoggedOut:
                            <li>
                                <button @onclick=LoginWithPasskey>
                                    <figure>
                                        <img src="_content/Sparc.Kori/icons/Key.svg" />
                                        <figcaption>
                                            Passkey Login
                                            <aside>Set up your passkey</aside>
                                        </figcaption>
                                    </figure>
                                </button>
                            </li>
                            break;
                        case LoginStates.ReadyForLogin:
                        case LoginStates.VerifyingToken:
                        case LoginStates.VerifyingEmail:
                        case LoginStates.AwaitingMagicLink:
                            <li>
                                <form @onsubmit=LoginWithEmail>
                                    <input @ref=LoginInput id="login-input" type="email" @bind="Email" name="username" placeholder="Enter your email" autocomplete="username webauthn" @onclick:stopPropagation="true" />
                                    <button type="submit">
                                        Login
                                    </button>
                                    @if (ShowFormError)
                                    {
                                        <label for="login-input" class="error">
                                            Email cannot be blank
                                        </label>
                                    }
                                    else if (Auth.LoginState == LoginStates.VerifyingToken || Auth.LoginState == LoginStates.VerifyingEmail)
                                    {
                                        <label for="login-input">
                                            Signing you in...
                                        </label>
                                    }
                                    else if (Auth.LoginState == LoginStates.AwaitingMagicLink)
                                    {
                                        <label for="login-input">
                                            Click the link in your email!
                                            <aside>
                                                <figure>
                                                    <img src="_content/Sparc.Kori/icons/Help.svg" />
                                                    <figcaption>
                                                        Didn't get an email?
                                                    </figcaption>
                                                </figure>
                                                <button @onclick=ClearInput>Try a different email</button>
                                            </aside>
                                        </label>
                                    }
                                </form>
                            </li>
                            <li>
                                <button @onclick=LoginWithPasskey>
                                    <figure>
                                        <img src="_content/Sparc.Kori/icons/Key.svg" />
                                        <figcaption>
                                            Passkey Login
                                            <aside>Use passkey</aside>
                                        </figcaption>
                                    </figure>
                                </button>
                                <div class="login-component__use-passkey">
                                    <button class="login-component__passkey-btn login-component__text-btn" @onclick="LoginWithPasskey">
                                        <img src="_content/Sparc.Kori/icons/Key.svg" /> Use passkey
                                    </button>
                                </div>
                            </li>
                            break;
                        case LoginStates.LoggedIn:
                            <li>
                                <button>
                                    <img src="_content/Sparc.Kori/icons/user-profile-circle.svg" /> Profile
                                </button>
                            </li>
                            <li>
                                <button>
                                    <img src="_content/Sparc.Kori/icons/Shield.svg" /> Setup Backup Email
                                </button>
                            </li>
                            <li>
                                <button @onclick=LogoutAsync>
                                    <img src="_content/Sparc.Kori/icons/Login.svg" /> Logout
                                </button>
                            </li>
                            break;
                        case LoginStates.Error:
                            <li>
                                <label class="error">
                                    @Auth.Message
                                </label>
                            </li>
                            break;
                    }
                    <li aria-hidden=true>
                        <hr />
                    </li>
                    <li>
                        <Sparc.Kori.Language.LanguageSelector />
                    </li>
                </menu>
            </section>
        </div>
    </Authorized>
</AuthorizeView>

@if (ShowMenu)
{
    <div class="overlay" @onclick=ToggleLoginMenu></div>
}

@code {
    [CascadingParameter] public required ClaimsPrincipal User { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? Token { get; set; }

    public string? Email;
    ElementReference? LoginInput;

    bool ShowMenu = false;
    bool UsePasskey = false;
    bool ShowFormError = false;

    protected override async Task OnInitializedAsync()
    {
        await foreach (var state in Auth.LoginAsync(User, Token))
            StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("initHyperScript");
    }

    async Task LoginWithPasskey()
    {
        UsePasskey = true;
        Console.WriteLine("logging in with passkey");
        await BeginLogin();
    }

    async Task LoginWithEmail()
    {
        UsePasskey = false;
        Console.WriteLine("logging in with email");
        if (Email == "")
        {
            ShowFormError = true;
        }
        else
        {
            ShowFormError = false;
            await BeginLogin();
        }
    }

    async Task BeginLogin()
    {
        // Attempt autofill signin
        // if (Email == null)
        // {
        //     Console.WriteLine("using passkey");
        //     await foreach (var state in Auth.LoginAsync(User))
        //         StateHasChanged();
        //     Auth.LoginState = LoginStates.ReadyForLogin;
        //         StateHasChanged();
        // }

        if (UsePasskey == true)
        {
            Email = "";
            await foreach (var state in Auth.LoginAsync(User))
                StateHasChanged();
            Auth.LoginState = LoginStates.ReadyForLogin;
            StateHasChanged();
        }

        if (Auth.LoginState == LoginStates.LoggedIn)
            return;

        await Task.Delay(1);
        if (LoginInput.HasValue && Email != null)
        {
            UsePasskey = false;
            Console.WriteLine("Email: " + Email);
            await LoginInput.Value.FocusAsync();
            await LoginAsync();
        }
    }

    async Task LoginAsync()
    {
        await foreach (var state in Auth.LoginAsync(User, Email))
        {
            Console.WriteLine($"Current state: {state}");
            StateHasChanged(); // Update the UI after each state change
        }
    }

    async Task LogoutAsync()
    {
        await foreach (var state in Auth.LogoutAsync(User!))
            StateHasChanged();

        Auth.LoginState = LoginStates.LoggedOut;
        StateHasChanged();
    }

    void ToggleLoginMenu()
    {
        ShowMenu = !ShowMenu;
    }


    void ToggleAccountSettings()
    {
        // logic to open and close account settings
    }

    void ClearInput()
    {
        // logic to clear input form for email
        Auth.LoginState = LoginStates.ReadyForLogin;
        StateHasChanged();
        LoginInput = null;
        Email = "";
    }
}