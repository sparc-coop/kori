@typeparam TItem

<div>
    <label class="@(IsLoading ? "better-search-loading" : "")" onclick="event.stopPropagation()">
        <img src="/_content/Sparc.Kori/icons/Search2.svg" alt="Search icon" />
        <input type="search" placeholder="@Placeholder" @bind-value="_searchText" @bind-value:event="oninput" @bind-value:after="PerformSearch" />
    </label>

    <hr />

    @if (ItemTemplate != null && _results.Any() && _results.FirstOrDefault() is var item)
    {
        <ul>
            @* <li onclick=@(() => Go(item))>
                @ItemTemplate(item)
            </li> *@
            <li>
                @ItemTemplate(item)
            </li>
        </ul>
    }

</div>

@code {
    [Parameter] public string Placeholder { get; set; } = "Search...";
    [Parameter] public Func<string?, Task<IEnumerable<TItem>>> OnSearch { get; set; } = null!;
    // [Parameter] public EventCallback<TItem> OnSelect { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; } = null!;

    string? _searchText;
    bool _isQueued;
    IEnumerable<TItem> _results = Array.Empty<TItem>();

    async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchText))
        {
            _results = Array.Empty<TItem>();
            return;
        }

        // Stealing search approach from https://blog.jeremylikness.com/blog/an-easier-blazor-debounce/
        if (IsLoading)
        {
            _isQueued = true;
            return;
        }

        do
        {
            IsLoading = true;
            _isQueued = false;
            _results = await OnSearch(_searchText?.Trim());
            IsLoading = false;
        } while (_isQueued);
    }

    // async Task Go(TItem item)
    // {
    //     _searchText = null;
    //     _results = Array.Empty<TItem>();
    //     await OnSelect.InvokeAsync(item);
    // }
}