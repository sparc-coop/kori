<aside id="kori-search" class="@(Kori.Mode == "Search" ? "show" : "")">
    <header>
        <div>
            <h5>Navigation</h5>
            <button onclick="@Kori.CloseAsync">
                <CloseIcon />
            </button>
        </div>
    </header>

    <BetterSearch IsLoading="@IsLoading" Placeholder="Type to find..." TItem="KoriSearch" OnSearch="SearchAsync">
        <ItemTemplate>
            @foreach (var contentsByDomain in contentResults.GroupBy(x => x.Domain))
            {
                var domain = contentsByDomain.Key;
                var path = contentsByDomain.FirstOrDefault()?.Path;
                var displayPath = string.IsNullOrWhiteSpace(path) ? "" : path;

                <article>
                    <div onclick="@(() => GoToPage(domain, null))">
                        <PageIcon />
                        <span>@($"{domain}{displayPath}")</span>
                    </div>

                    @foreach (var content in contentsByDomain)
                    {
                        if (!string.IsNullOrWhiteSpace(content.Text) || !string.IsNullOrWhiteSpace(content.Tag))
                        {
                            <div onclick="@(() => GoToContent(content))">
                                <ContentIcon />
                                <span>@(content.Text ?? content.Tag)</span>
                            </div>
                        }
                    }
                </article>
            }
        </ItemTemplate>
    </BetterSearch>
</aside>

@code {
    bool IsLoading;
    List<KoriSearch> contentResults = new();
    string searchTerm = "";

    async Task<IEnumerable<KoriSearch>> SearchAsync(string? searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return Array.Empty<KoriSearch>();
        }

        IsLoading = true;

        contentResults = await Kori.SearchAsync(searchTerm);
        IsLoading = false;

        return contentResults;
    }   

    void GoToContent(KoriSearch selectedContent)
    {
        string baseUrl = selectedContent.Domain.StartsWith("http")
            ? selectedContent.Domain
            : $"https://{selectedContent.Domain}";

#if DEBUG
        baseUrl = Nav.BaseUri; 
        if (baseUrl.EndsWith("/"))
        {
            baseUrl = baseUrl.TrimEnd('/');
        }
#endif

        string fullUrl = $"{baseUrl}{(string.IsNullOrWhiteSpace(selectedContent.Path) ? "" : selectedContent.Path)}";

        string encodedTextFragment = Uri.EscapeDataString(selectedContent.Text ?? selectedContent.Tag ?? "");

        fullUrl = $"{fullUrl}#:~:text={encodedTextFragment}";

        Nav.NavigateTo(fullUrl, forceLoad: true);
    }

    void GoToPage(string domain, string? path)
    {
        string baseUrl = domain.StartsWith("http")
            ? domain
            : $"https://{domain}";

        string fullUrl = $"{baseUrl}{(string.IsNullOrWhiteSpace(path) ? "" : path)}";

        Nav.NavigateTo(fullUrl, forceLoad: true);
    }
}