<div id="kori-top-bar" class="kori-top-bar kori-ignore">
    <div class="top-bar-buttons">
        <div class="left-buttons">
            <button class="top-bar-button toggle-button @(isToggledOn ? "toggle-on" : "toggle-off")" onclick="@TogglePower">
                <img src="@PowerIcon" alt="Toggle icon" class="icon icon-on-off" />
            </button>
            <KoriTopBarButton Mode="Language" Icon="Lang" OnClick="ModeChanged" />
            <KoriTopBarButton Mode="Blog" Icon="Blog" OnClick="ModeChanged" />
            <KoriTopBarButton Mode="ABTesting" Icon="AB" OnClick="ModeChanged" />
        </div>
        <div class="right-buttons">
            <KoriTopBarButton Mode="Search" Icon="Search2" OnClick="ModeChanged" ShowText="false" />
            <KoriTopBarButton Mode="History" Icon="History" OnClick="ModeChanged" ShowText="false" />
            <KoriTopBarButton Mode="Tutorial" Icon="Tutorial" OnClick="ModeChanged" ShowText="false" />
        </div>
    </div>

    <div class="bottom-bar">
        <div class="logo">
            <img src="/_content/Sparc.Kori/images/Kori_Logo.svg" alt="Logo" />
        </div>
        <div class="content">
            @switch (Kori.Mode)
            {
                case "Search":
                    <SearchMode />
                    break;
                case "Language":
                    <LanguageMode />
                    break;
                case "Blog":
                    <BlogMode />
                    break;
                case "ABTesting":
                    <ABTestingMode />
                    break;
                case "Edit":
                    <EditTextMode />
                    break;
                case "EditImage":
                    <EditImageMode />
                    break;
                default:
                    <DefaultMode />
                    break;
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string> OnModeChanged { get; set; }

    bool isToggledOn = false;
    void TogglePower() => isToggledOn = !isToggledOn;
    string PowerIcon => isToggledOn ? "_content/Sparc.Kori/icons/On.svg" : "_content/Sparc.Kori/icons/Off.svg";

    async Task ModeChanged(string mode)
    {
        if (Kori.Mode == mode)
        {
            Kori.Mode = string.Empty;
            await OnModeChanged.InvokeAsync(string.Empty);
            return;
        }

        Kori.Mode = mode;
        await OnModeChanged.InvokeAsync(mode);

        switch (Kori.Mode)
        {
            case "Search":
                await Kori.OpenSearchMenuAsync();
                break;
            case "Language":
                Kori.OpenTranslationMenu();
                break;
            case "Blog":
                Kori.OpenBlogMenu();
                break;
            case "ABTesting":
                Kori.OpenABTestingMenu();
                break;
            case "Edit":
                await Kori.EditAsync();
                break;
            case "EditImage":
                await Kori.EditAsync();
                break;
            default:
                break;
        }

        StateHasChanged();
    }
}

