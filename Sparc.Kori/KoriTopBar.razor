<AuthorizeView>
    <Authorized>
        <div id="kori-top-bar" class="kori-ignore">
            <section class="top-bar-buttons">
                <div class="left-buttons">
                    <button class="top-bar-button toggle-button @(isToggledOn ? "toggle-on" : "toggle-off")" onclick="@TogglePower">
                        <img src="@PowerIcon" alt="Toggle icon" class="icon icon-on-off" />
                    </button>
                    <KoriTopBarButton Mode="Language" Icon="Lang" OnClick="ModeChanged" />
                    <KoriTopBarButton Mode="Blog" Icon="Blog" OnClick="ModeChanged" />
                    <KoriTopBarButton Mode="A/B Testing" Icon="AB" OnClick="ModeChanged" />
                </div>
                <div class="right-buttons">
                    <KoriTopBarButton Mode="Search" Icon="Search2" OnClick="ModeChanged" ShowText="false" />
                    <KoriTopBarButton Mode="History" Icon="History" OnClick="ModeChanged" ShowText="false" />
                    <KoriTopBarButton Mode="Tutorial" Icon="Tutorial" OnClick="ModeChanged" ShowText="false" />
                </div>
            </section>

            <section class="bottom-bar">
                <header>
                    <img src="/_content/Sparc.Kori/images/Kori_Logo.svg" alt="Logo" />
                </header>
                <div class="content">
                    @switch (Kori.Mode)
                    {
                        case "Search":
                            <Sparc.Kori.Search.SearchMode />
                            break;
                        case "Language":
                            <Sparc.Kori.Languages.LanguageMode />
                            break;
                        case "Blog":
                            <Sparc.Kori.Text.BlogMode />
                            break;
                        case "ABTesting":
                            <Sparc.Kori.ABTesting.ABTestingMode />
                            break;
                        case "Edit":
                            <Sparc.Kori.Text.EditTextMode />
                            break;
                        case "EditImage":
                            <Sparc.Kori.Images.EditImageMode />
                            break;
                        case "History":
                            <Sparc.Kori.History.HistoryMode />
                            break;
                        default:
                            <DefaultMode />
                            break;
                    }
                </div>
                @if (Kori.Mode == "Edit")
                {
                    <button class="save-btn" onclick="@(() => Kori.BeginSaveAsync())">Save</button>
                }
            </section>
        </div>
    </Authorized>
</AuthorizeView>

<style class="kori-ignore">
    @@import url(https://fonts.googleapis.com/css2?family=Encode+Sans+Semi+Expanded:wght@100;200;300;400;500;600;700;800;900&display=swap);
    @@import url(https://fonts.googleapis.com/css2?family=Encode+Sans+Expanded:wght@100;200;300;400;500;600;700;800;900&display=swap);

    .top-bar-button .icon, .bottom-bar .icon {
        margin-top: -2px !important;
        flex-shrink: 0;
    }

        .top-bar-button .icon path, .top-bar-button .icon circle {
            fill: none !important;
        }

    .top-bar-button:hover .icon path, .top-bar-button:hover .icon circle, .top-bar-button.selected .icon path, .top-bar-button.selected .icon circle {
        stroke: #4162DC !important;
    }

    .bottom-bar .content button.icon-btn .icon path, .bottom-bar .content button.icon-btn .icon circle {
        fill: none !important;
    }

    .bottom-bar .content button.icon-btn:hover .icon path, .bottom-bar .content button.icon-btn:hover .icon circle {
        stroke: #4162DC !important;
    }
</style>

@code {
    [Parameter] public EventCallback<string> OnModeChanged { get; set; }

    bool isToggledOn = false;
    void TogglePower() => isToggledOn = !isToggledOn;
    string PowerIcon => isToggledOn ? "_content/Sparc.Kori/icons/On.svg" : "_content/Sparc.Kori/icons/Off.svg";

    async Task ModeChanged(string mode)
    {
        if (Kori.Mode == mode)
        {
            Kori.Mode = string.Empty;
            await OnModeChanged.InvokeAsync(string.Empty);
            return;
        }

        Kori.Mode = mode;
        await OnModeChanged.InvokeAsync(mode);

        switch (Kori.Mode)
        {
            case "Search":
                await Kori.OpenSearchMenuAsync();
                break;
            case "Language":
                Kori.OpenTranslationMenu();
                break;
            case "Blog":
                Kori.OpenBlogMenu();
                break;
            case "ABTesting":
                Kori.OpenABTestingMenu();
                break;
            case "Edit":
                await Kori.EditAsync();
                break;
            case "EditImage":
                await Kori.EditAsync();
                break;
            default:
                break;
        }

        StateHasChanged();
    }
}

